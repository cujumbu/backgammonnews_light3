---
import Layout from '../layouts/Layout.astro';
import { fetchAllFeeds } from '../utils/fetchNews';
import StatsCard from '../components/StatsCard.astro';
import NewsCard from '../components/NewsCard.astro';
import FeaturedNews from '../components/FeaturedNews.astro';
import CategoryFilter from '../components/CategoryFilter.astro';
import SearchBar from '../components/SearchBar';
import NewsletterSignup from '../components/NewsletterSignup';
import ShareButtons from '../components/ShareButtons';

// Get URL parameters
const { searchParams } = Astro.url;
const category = searchParams.get('category') || 'All';
const searchQuery = searchParams.get('q') || '';

// Fetch and process news
const allNews = await fetchAllFeeds();
const stats = {
  totalArticles: allNews.length,
  sources: [...new Set(allNews.map(item => item.source))].length,
  latestUpdate: allNews[0]?.pubDate ? new Date(allNews[0].pubDate) : new Date(),
};

// Find the latest article that has an image
const featuredArticle = allNews.find(article => article.imageUrl);
const remainingNews = allNews.filter(article => article !== featuredArticle);

// Filter news based on category and search query
let filteredNews = category === 'All' 
  ? remainingNews 
  : remainingNews.filter(item => item.source === category);

if (searchQuery) {
  const query = searchQuery.toLowerCase();
  filteredNews = filteredNews.filter(item => 
    item.title.toLowerCase().includes(query) || 
    item.contentSnippet.toLowerCase().includes(query)
  );
}

// Client-side search handler
const handleSearch = `(query) => {
  const url = new URL(window.location.href);
  if (query) {
    url.searchParams.set('q', query);
  } else {
    url.searchParams.delete('q');
  }
  window.location.href = url.toString();
}`;
---

<Layout title="Backgammon News - Latest Updates from the Backgammon World">
  <header class="border-b border-gray-200/30 backdrop-blur-sm sticky top-0 z-50 bg-bg-primary/80">
    <div class="container mx-auto px-4 py-4">
      <nav class="flex items-center justify-between">
        <div class="flex items-center gap-2">
          <div class="w-10 h-10 rounded-lg bg-gradient-to-br from-accent to-accent-dark flex items-center justify-center shadow-lg shadow-accent/20">
            <span class="text-white font-display font-bold text-xl">B</span>
          </div>
          <h1 class="font-display font-bold text-2xl bg-gradient-to-br from-gray-900 via-accent to-accent-dark bg-clip-text text-transparent">
            Backgammon News
          </h1>
        </div>
        <div class="flex items-center gap-6">
          <a href="/rss.xml" class="text-gray-600 hover:text-accent transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M6.18 15.64a2.18 2.18 0 0 1 2.18 2.18C8.36 19 7.38 20 6.18 20C5 20 4 19 4 17.82a2.18 2.18 0 0 1 2.18-2.18M4 4.44A15.56 15.56 0 0 1 19.56 20h-2.83A12.73 12.73 0 0 0 4 7.27V4.44m0 5.66a9.9 9.9 0 0 1 9.9 9.9h-2.83A7.07 7.07 0 0 0 4 12.93V10.1Z"/>
            </svg>
            RSS Feed
          </a>
        </div>
      </nav>
    </div>
  </header>

  <main class="container mx-auto px-4 py-8">
    <SearchBar 
      client:load 
      onSearch={handleSearch} 
      initialQuery={searchQuery} 
    />

    <section class="mb-12 animate-fade-in">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatsCard
          title="Total Articles"
          value={stats.totalArticles}
          icon="📰"
          trend="+5 today"
        />
        <StatsCard
          title="News Sources"
          value={stats.sources}
          icon="🌐"
          trend="All active"
        />
        <StatsCard
          title="Latest Update"
          value={stats.latestUpdate.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}
          icon="🕒"
          trend="Real-time"
        />
      </div>
    </section>

    {featuredArticle && <FeaturedNews article={featuredArticle} />}

    <CategoryFilter selectedCategory={category} />

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8 mt-12">
      <div class="lg:col-span-3">
        <section class="space-y-8">
          {filteredNews.length > 0 ? (
            <div class="grid gap-8 md:grid-cols-2">
              {filteredNews.map((item, index) => (
                <div class="animate-slide-up" style={`animation-delay: ${index * 0.1}s`}>
                  <NewsCard
                    title={item.title}
                    link={item.link}
                    date={new Date(item.pubDate)}
                    source={item.source}
                    description={item.contentSnippet}
                    imageUrl={item.imageUrl}
                    author={item.author}
                    readingTime={item.readingTime}
                    categories={item.categories}
                  />
                  <div class="mt-4">
                    <ShareButtons url={item.link} title={item.title} client:load />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="text-center py-12">
              <p class="text-gray-600 text-lg">No articles found matching your search criteria.</p>
              <button
                onclick="window.location.href = window.location.pathname;"
                class="mt-4 px-6 py-2 bg-accent text-white rounded-lg hover:bg-accent-dark transition-colors duration-300"
              >
                Clear Filters
              </button>
            </div>
          )}
        </section>
      </div>
      
      <div class="lg:col-span-1 space-y-8">
        <NewsletterSignup client:load />
        
        <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-200/50">
          <h3 class="text-xl font-display font-semibold mb-4">Popular Tags</h3>
          <div class="flex flex-wrap gap-2">
            {[...new Set(allNews.flatMap(item => item.categories || []))].slice(0, 10).map(tag => (
              <span class="px-3 py-1.5 bg-gray-100 text-gray-600 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  </main>

  <footer class="border-t border-gray-200/30 py-8 mt-16 bg-white/50 backdrop-blur-sm">
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div>
          <h3 class="font-display font-semibold text-lg mb-4">About</h3>
          <p class="text-gray-600 text-sm">Your premier source for the latest backgammon news, tournaments, and community updates from around the world.</p>
        </div>
        <div>
          <h3 class="font-display font-semibold text-lg mb-4">Quick Links</h3>
          <ul class="space-y-2 text-sm">
            <li><a href="#" class="text-gray-600 hover:text-accent transition-colors">Latest News</a></li>
            <li><a href="#" class="text-gray-600 hover:text-accent transition-colors">Tournaments</a></li>
            <li><a href="#" class="text-gray-600 hover:text-accent transition-colors">RSS Feed</a></li>
          </ul>
        </div>
        <div>
          <h3 class="font-display font-semibold text-lg mb-4">Sources</h3>
          <ul class="space-y-2 text-sm">
            <li><a href="https://usbgf.org" class="text-gray-600 hover:text-accent transition-colors">USBGF</a></li>
            <li><a href="https://wbgf.info" class="text-gray-600 hover:text-accent transition-colors">WBGF</a></li>
            <li><a href="https://ukbgf.com" class="text-gray-600 hover:text-accent transition-colors">UKBGF</a></li>
          </ul>
        </div>
      </div>
      <div class="mt-8 pt-8 border-t border-gray-200/30 text-center text-gray-600 text-sm">
        <p>© {new Date().getFullYear()} Backgammon News. All rights reserved.</p>
      </div>
    </div>
  </footer>
</Layout>

<script>
  // Handle category filter clicks
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('[data-category]');
    buttons.forEach(button => {
      button.addEventListener('click', (e) => {
        const category = (e.target as HTMLElement).dataset.category;
        const url = new URL(window.location.href);
        if (category === 'All') {
          url.searchParams.delete('category');
        } else {
          url.searchParams.set('category', category);
        }
        window.location.href = url.toString();
      });
    });
  });
</script>
